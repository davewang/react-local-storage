/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/2dust/AndroidLibXrayLite */
#ifndef LIBV2RAY_H_
#define LIBV2RAY_H_

#include <stddef.h>
#include <stdbool.h>

// =================================================================
// Section 1: CGo and Go Basic Type Definitions
// These are necessary for the function signatures.
// =================================================================

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;

#ifdef __cplusplus
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#else
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif
#endif

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;


// =================================================================
// Section 2: Callback Function Pointer Type Definitions
// Your C++ code needs these types to pass callbacks.
// =================================================================

typedef int (*Setup_fn)(int handle, const char* conf);
typedef int (*Prepare_fn)(int handle);
typedef int (*Shutdown_fn)(int handle);
typedef bool (*Protect_fn)(int handle, int fd);
typedef int (*OnEmitStatus_fn)(int handle, int status, const char* msg);


// =================================================================
// Section 3: Exported Function Declarations
// This is the public API that your C++ code will call.
// =================================================================

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void SetCallbacks(Setup_fn setup, Prepare_fn prepare, Shutdown_fn shutdown, Protect_fn protect, OnEmitStatus_fn onEmitStatus);
extern __declspec(dllexport) int CreateV2RayPoint(GoUint8 adns);
extern __declspec(dllexport) char* StartV2RayPoint(int handle, GoUint8 prefIPv6, char* domainName, char* configFileContent);
extern __declspec(dllexport) char* StopV2RayPoint(int handle);
extern __declspec(dllexport) void FreeV2RayPoint(int handle);
extern __declspec(dllexport) long long int QueryStats(int handle, char* tag, char* direct);
extern __declspec(dllexport) long long int MeasureDelay(int handle, char* url);
extern __declspec(dllexport) void InitV2Env(char* envPath, char* key);
extern __declspec(dllexport) char* CheckVersionX();
extern __declspec(dllexport) void FreeCString(char* s);

#ifdef __cplusplus
}
#endif

#endif // LIBV2RAY_H_